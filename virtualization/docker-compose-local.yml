services:
  # go-init-manager:
  go_init_minio:
    container_name: go_init_minio
    image: minio/minio:latest
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./data/minio-storage:/data
      - ./data/certs:/root/.minio/certs:ro
    environment:
      MINIO_ROOT_USER: B6NZaLCC7AmyqSkdB2Rr
      MINIO_ROOT_PASSWORD: C8gZg0GSg31mEUs3BRVj7Dh5nIZ4HCvMPEHEamYq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - go-init-networks

  minio-init:
    image: minio/mc
    depends_on:
      - go_init_minio
    entrypoint: >
      /bin/sh -c "
      sleep 10 &&
      /usr/bin/mc config host add myminio http://go_init_minio:9000 B6NZaLCC7AmyqSkdB2Rr C8gZg0GSg31mEUs3BRVj7Dh5nIZ4HCvMPEHEamYq &&
      /usr/bin/mc mb myminio/go-init-archives &&
      /usr/bin/mc anonymous set download myminio/go-init-archives &&
      mc ilm rule add --expire-days 1 local/go-init-archives &&
      echo 'MinIO initialized successfully'
      "
    networks:
      - go-init-networks

  go_init_postgres:
    container_name: go_init_postgres_c
    image: postgres
    environment:
      POSTGRES_DB: "go_init_manager_db"
      POSTGRES_USER: "go_init_usr"
      POSTGRES_PASSWORD: "1234"
      PGDATA: "var/lib/postgresql/data/pgdata"
    volumes:
     - ./data/go-init-postgres/initdb:/docker-entrypoint-initdb.d
     - ./data/go-init-postgres/postgresql/data:/var/lib/postgresql/data
    ports:
     - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U go_init_usr -d go_init_manager_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - go-init-networks
  go_init_pgadmin:
    container_name: go_init_pgadmin_c
    image: elestio/pgadmin
    depends_on:
      - go_init_postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: "mail@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "1234"
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_LISTEN_ADDRESS: "0.0.0.0"
    volumes:
      - ./data/go-init-pgadmin/pgadmin:/var/lib/pgadmin
    ports:
      - "6060:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - go-init-networks

  go_init_zookeeper:
    container_name: go_init_zookeeper
    image: confluentinc/cp-zookeeper:5.5.0
    hostname: go_init_zookeeper
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    networks:
      - go-init-networks

  go_init_kafka:
    container_name: go_init_kafka
    image: confluentinc/cp-kafka:5.5.0
    hostname: ep_kafka
    depends_on:
      - go_init_zookeeper
    ports:
      - "29092:29092"
      - "29093:29093"
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://go_init_kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://go_init_kafka:29092,CONTROLLER://go_init_kafka:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@go_init_kafka:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_ZOOKEEPER_CONNECT: 'go_init_zookeeper:2181'
    restart: unless-stopped
    networks:
      - go-init-networks

  kafka-init-topics:
    image: confluentinc/cp-kafka:5.5.0
    depends_on:
      - go_init_kafka
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b go_init_kafka:29092 1 300 && \
      kafka-topics --create --topic go-init-processing --partitions 1 --replication-factor 1 --bootstrap-server go_init_kafka:29092 && \
        kafka-topics --create --topic go-init-done --partitions 1 --replication-factor 1 --bootstrap-server go_init_kafka:29092'"
    networks:
      - go-init-networks

  go_init_kafka_ui:
    container_name: go_init_kafka_ui
    image: provectuslabs/kafka-ui
    ports:
      - "8082:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: go_init_kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: go_init_zookeeper:2181
    depends_on:
      - go_init_kafka
    networks:
      - go-init-networks

networks:
  go-init-networks:
    driver: bridge