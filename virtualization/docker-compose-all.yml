services:
# ────────────────────────── MINIO + NGINX ─────────────────────────────────── #
  go_init_minio:
    image: minio/minio:latest
    container_name: go_init_minio
    hostname: minio.local
    command: server --console-address ":9001" /data
    ports: ["9000:9000", "9001:9001"]
    volumes: ["./data/minio-storage:/data"]
    environment:
      MINIO_ROOT_USER:  B6NZaLCC7AmyqSkdB2Rr
      MINIO_ROOT_PASSWORD: C8gZg0GSg31mEUs3BRVj7Dh5nIZ4HCvMPEHEamYq
      MINIO_BROWSER: "off"
    extra_hosts: ["host.docker.internal:host-gateway"]
    healthcheck:
      test: ["CMD","curl","-f","http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy: { resources: { limits: { cpus: "2", memory: 2g } } }
    networks: [go-init-networks]

  nginx_proxy:
    image: nginx:latest
    container_name: go_init_nginx
    ports: ["9005:80"]
    volumes: ["./minio-proxy.conf:/etc/nginx/nginx.conf"]
    depends_on: [go_init_minio]
    deploy: { resources: { limits: { cpus: "0.5", memory: 256m } } }
    networks: [go-init-networks]

  minio-init:
    image: minio/mc
    container_name: minio_init
    depends_on:
      go_init_minio: { condition: service_healthy }
    entrypoint: >
      /bin/sh -c "
        sleep 5 &&
        mc alias set local http://minio.local:9000 B6NZaLCC7AmyqSkdB2Rr C8gZg0GSg31mEUs3BRVj7Dh5nIZ4HCvMPEHEamYq &&
        mc mb --ignore-existing local/go-init-archives &&
        mc anonymous set download local/go-init-archives &&
        mc ilm rule add --expire-days 1 local/go-init-archives "
    networks: [go-init-networks]

# ───────────────────────────── POSTGRES + PgBouncer ───────────────────────── #
  go_init_postgres:
    image: postgres:15
    container_name: go_init_postgres
    environment:
      POSTGRES_DB:       go_init_manager_db
      POSTGRES_USER:     go_init_usr
      POSTGRES_PASSWORD: 1234
      # Используем проверку по паролю с минимумом хеширования для совместимости с pgbouncer
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=password"
      PGDATA: /var/lib/postgresql/data/pgdata
      # Оптимизация производительности PostgreSQL
      POSTGRES_MAX_CONNECTIONS: "600"         # Увеличиваем макс. соединений
      POSTGRES_SHARED_BUFFERS: "512MB"        # Увеличиваем буферы для кэширования
      POSTGRES_EFFECTIVE_CACHE_SIZE: "1GB"    # Увеличиваем размер кэша
      POSTGRES_WORK_MEM: "32MB"              # Увеличиваем память для операций
      POSTGRES_MAINTENANCE_WORK_MEM: "256MB"  # Увеличиваем память для обслуживания
      POSTGRES_RANDOM_PAGE_COST: "1.1"
      POSTGRES_SYNCHRONOUS_COMMIT: "off"      # Отключаем синхронные коммиты для производительности
    volumes:
      - ./data/go-init-postgres/initdb:/docker-entrypoint-initdb.d   # тут 02_pgbouncer_user.sql
      - ./data/go-init-postgres/postgresql/data:/var/lib/postgresql/data
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U go_init_usr -d go_init_manager_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [go-init-networks]

  go_init_pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: go_init_pgbouncer
    depends_on: [go_init_postgres]
    environment:
      AUTH_TYPE: plain         # Используем plain для совместимости с PostgreSQL password auth
      DB_USER:     go_init_usr
      DB_PASSWORD: 1234
      DB_HOST:     go_init_postgres
      DB_PORT:     5432
      POOL_MODE:   session    # Сохраняем соединения между запросами
      LISTEN_PORT: 6432
      MAX_CLIENT_CONN: 5000   # Увеличиваем максимум клиентов
      DEFAULT_POOL_SIZE: 500  # Увеличиваем размер пула
      RESERVE_POOL_SIZE: 200  # Увеличиваем резервный пул
      RESERVE_POOL_TIMEOUT: 2 # Таймаут для получения соединения из резерва (сек)
      MAX_DB_CONNECTIONS: 550 # Лимит соединений к БД (должен быть < postgres max_connections)
      TCP_KEEPALIVE: 1        # Держать TCP соединения активными
      TCP_KEEPIDLE: 60        # Интервал проверки активности в секундах
      DNS_MAX_TTL: 15         # Быстрее обновлять DNS
      QUERY_WAIT_TIMEOUT: 120 # Ожидание запроса в секундах
      STATS_PERIOD: 60        # Период сбора статистики
      # Отключаем лишнее логирование для повышения производительности
      LOG_CONNECTIONS: 0
      LOG_DISCONNECTIONS: 0
      LOG_POOLER_ERRORS: 0
      VERBOSE: 0
    ports: ["6432:6432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -p 6432 -U go_init_usr || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    deploy: { resources: { limits: { cpus: "1", memory: 512m } } }
    networks: [go-init-networks]

  go_init_pgadmin:
    image: elestio/pgadmin
    container_name: go_init_pgadmin
    depends_on: [go_init_postgres]
    environment:
      PGADMIN_DEFAULT_EMAIL:    mail@gmail.com
      PGADMIN_DEFAULT_PASSWORD: 1234
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes: ["./data/go-init-pgadmin/pgadmin:/var/lib/pgadmin"]
    ports: ["6060:80"]
    networks: [go-init-networks]

# ──────────────────────────── Zookeeper + Kafka ───────────────────────────── #
  go_init_zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    container_name: go_init_zookeeper
    environment: { ZOOKEEPER_CLIENT_PORT: 2181, ZOOKEEPER_TICK_TIME: 2000 }
    ulimits: { nofile: { soft: 65536, hard: 65536 } }
    deploy: { resources: { limits: { cpus: "2", memory: 2g } } }
    networks: [go-init-networks]

  go_init_kafka:
    image: confluentinc/cp-kafka:5.5.0
    container_name: go_init_kafka
    depends_on: [go_init_zookeeper]
    ports: ["29092:29092","29093:29093","9092:9092"]
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: go_init_zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://go_init_kafka:29092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@go_init_kafka:29093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # Оптимизация производительности Kafka
      KAFKA_NUM_PARTITIONS: 16               # Увеличиваем число партиций по умолчанию
      KAFKA_NUM_NETWORK_THREADS: 8           # Больше потоков для сети
      KAFKA_NUM_IO_THREADS: 16               # Больше потоков для I/O
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 2097152 # Увеличиваем размер буфера отправки
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 2097152 # Увеличиваем размер буфера приема
    deploy: { resources: { limits: { cpus: "4", memory: 4g } } }
    networks: [go-init-networks]

  kafka-init-topics:
    image: confluentinc/cp-kafka:5.5.0
    depends_on: [go_init_kafka]
    command: >
      bash -c "cub kafka-ready -b go_init_kafka:29092 1 300 &&
               kafka-topics --create --topic go-init-processing --partitions 16 --replication-factor 1 --bootstrap-server go_init_kafka:29092 &&
               kafka-topics --create --topic go-init-done        --partitions 16 --replication-factor 1 --bootstrap-server go_init_kafka:29092"
    networks: [go-init-networks]

  go_init_kafka_ui:
    image: provectuslabs/kafka-ui
    container_name: go_init_kafka_ui
    ports: ["8082:8080"]
    depends_on: [go_init_kafka]
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: go_init_kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: go_init_zookeeper:2181
    deploy: { resources: { limits: { cpus: "0.25", memory: 256m } } }
    networks: [go-init-networks]

# ─────────────────────────────── MICROSERVICES ────────────────────────────── #
  go_init_manager:
    build: { context: ../go-init-manager, dockerfile: build/docker/Dockerfile }
    depends_on: [go_init_pgbouncer, go_init_kafka]
    environment:
      GOMAXPROCS: "8"                  # Увеличиваем для параллелизации
      DB_HOST: go_init_pgbouncer
      DB_PORT: 6432
      DB_USER: go_init_usr
      DB_PASSWORD: 1234
      DB_NAME: go_init_manager_db
      DB_MAX_OPEN_CONNS: "200"         # Максимум открытых соединений
      DB_MAX_IDLE_CONNS: "100"          # Кэшируем соединения
      DB_CONN_MAX_LIFETIME: "5m"       # Максимальное время жизни соединения
      DB_CONN_MAX_IDLE_TIME: "1m"      # Время простоя соединения
    command: ["/service/service","--config","config.yml"]
    volumes: ["./configs/manager-config.yml:/service/config.yml"]
    ports: ["60013:60013","60014:60014"]
    deploy: { resources: { limits: { cpus: "4", memory: 2g } } }   # Увеличиваем CPU
    networks: [go-init-networks]

  go_init_generator:
    build: { context: ../go-init-generator, dockerfile: build/docker/Dockerfile }
    depends_on: [go_init_kafka, go_init_manager]
    environment:
      GOMAXPROCS: "4"
      DB_HOST: go_init_pgbouncer
      DB_PORT: 6432
      DB_USER: go_init_usr
      DB_PASSWORD: 1234
      DB_NAME: go_init_manager_db
      DB_MAX_OPEN_CONNS: "80"          # Больше соединений для каждого экземпляра
      DB_MAX_IDLE_CONNS: "40"          # т.к. их будет 4 экземпляра
      DB_CONN_MAX_LIFETIME: "5m"
      DB_CONN_MAX_IDLE_TIME: "1m"
    command: ["/service/service","--config","config.yml"]
    volumes: ["./configs/generator-config.yml:/service/config.yml"]
    deploy:
      replicas: 4                      # 4 экземпляра согласно требованиям
      resources: { limits: { cpus: "2", memory: 1g } }
    networks: [go-init-networks]

  go_init_publisher:
    build: { context: ../go-init-publisher, dockerfile: build/docker/Dockerfile }
    depends_on:
      go_init_minio: { condition: service_healthy }
      minio-init:    { condition: service_completed_successfully }
      go_init_pgbouncer:
        condition: service_started
    environment:
      GOMAXPROCS: "4"
      DB_HOST: go_init_pgbouncer
      DB_PORT: 6432
      DB_USER: go_init_usr
      DB_PASSWORD: 1234
      DB_NAME: go_init_manager_db
      DB_MAX_OPEN_CONNS: "80"
      DB_MAX_IDLE_CONNS: "40"
      DB_CONN_MAX_LIFETIME: "5m"
      DB_CONN_MAX_IDLE_TIME: "1m"
    command: ["/bin/sh","-c","mkdir -p /service/storage && /service/service --config config.yml"]
    volumes:
      - ./configs/publisher-config.yml:/service/config.yml
      - ./data/publisher-storage:/service/storage
    ports: ["8086:8086","60024:60024"]
    extra_hosts: ["host.docker.internal:host-gateway"]
    deploy: { resources: { limits: { cpus: "2", memory: 1g } } }
    networks: [go-init-networks]

  frontend:
    build: { context: ../frontend, dockerfile: docker/Dockerfile }
    container_name: go_init_frontend
    ports: ["5173:5173"]
    environment:
      NODE_ENV: development
      VITE_API_URL: http://go_init_manager:60013/graphql
    volumes: ["../frontend:/app","/app/node_modules"]
    depends_on: [go_init_manager]
    extra_hosts: ["host.docker.internal:host-gateway"]
    deploy: { resources: { limits: { cpus: "0.25", memory: 256m } } }
    networks: [go-init-networks]
networks:
  go-init-networks:
    driver: bridge