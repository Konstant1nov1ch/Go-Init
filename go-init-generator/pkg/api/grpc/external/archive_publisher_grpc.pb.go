// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: external/archive_publisher.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArchivePublisherClient is the client API for ArchivePublisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchivePublisherClient interface {
	// Метод для стриминга архива чанками
	StreamArchive(ctx context.Context, opts ...grpc.CallOption) (ArchivePublisher_StreamArchiveClient, error)
}

type archivePublisherClient struct {
	cc grpc.ClientConnInterface
}

func NewArchivePublisherClient(cc grpc.ClientConnInterface) ArchivePublisherClient {
	return &archivePublisherClient{cc}
}

func (c *archivePublisherClient) StreamArchive(ctx context.Context, opts ...grpc.CallOption) (ArchivePublisher_StreamArchiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArchivePublisher_ServiceDesc.Streams[0], "/archive.ArchivePublisher/StreamArchive", opts...)
	if err != nil {
		return nil, err
	}
	x := &archivePublisherStreamArchiveClient{stream}
	return x, nil
}

type ArchivePublisher_StreamArchiveClient interface {
	Send(*ArchiveChunk) error
	CloseAndRecv() (*StreamResponse, error)
	grpc.ClientStream
}

type archivePublisherStreamArchiveClient struct {
	grpc.ClientStream
}

func (x *archivePublisherStreamArchiveClient) Send(m *ArchiveChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *archivePublisherStreamArchiveClient) CloseAndRecv() (*StreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArchivePublisherServer is the server API for ArchivePublisher service.
// All implementations must embed UnimplementedArchivePublisherServer
// for forward compatibility
type ArchivePublisherServer interface {
	// Метод для стриминга архива чанками
	StreamArchive(ArchivePublisher_StreamArchiveServer) error
	mustEmbedUnimplementedArchivePublisherServer()
}

// UnimplementedArchivePublisherServer must be embedded to have forward compatible implementations.
type UnimplementedArchivePublisherServer struct {
}

func (UnimplementedArchivePublisherServer) StreamArchive(ArchivePublisher_StreamArchiveServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamArchive not implemented")
}
func (UnimplementedArchivePublisherServer) mustEmbedUnimplementedArchivePublisherServer() {}

// UnsafeArchivePublisherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchivePublisherServer will
// result in compilation errors.
type UnsafeArchivePublisherServer interface {
	mustEmbedUnimplementedArchivePublisherServer()
}

func RegisterArchivePublisherServer(s grpc.ServiceRegistrar, srv ArchivePublisherServer) {
	s.RegisterService(&ArchivePublisher_ServiceDesc, srv)
}

func _ArchivePublisher_StreamArchive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArchivePublisherServer).StreamArchive(&archivePublisherStreamArchiveServer{stream})
}

type ArchivePublisher_StreamArchiveServer interface {
	SendAndClose(*StreamResponse) error
	Recv() (*ArchiveChunk, error)
	grpc.ServerStream
}

type archivePublisherStreamArchiveServer struct {
	grpc.ServerStream
}

func (x *archivePublisherStreamArchiveServer) SendAndClose(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *archivePublisherStreamArchiveServer) Recv() (*ArchiveChunk, error) {
	m := new(ArchiveChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArchivePublisher_ServiceDesc is the grpc.ServiceDesc for ArchivePublisher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArchivePublisher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archive.ArchivePublisher",
	HandlerType: (*ArchivePublisherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamArchive",
			Handler:       _ArchivePublisher_StreamArchive_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "external/archive_publisher.proto",
}
