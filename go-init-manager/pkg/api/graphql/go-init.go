package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"

	"go-init/pkg/api/graphql/model"
)

// CreateTemplate is the resolver for the createTemplate field.
func (r *mutationResolver) CreateTemplate(ctx context.Context, input model.CreateTemplateInput) (*model.TemplateResponse, error) {
	// Call service method but never return nil for the response
	response, err := r.Service.CreateTemplate(ctx, input)
	if err != nil || response == nil {
		// If we get an error or nil response, create a fallback error response
		message := "Failed to create template"
		if err != nil {
			message = err.Error()
		}
		return &model.TemplateResponse{
			Success: false,
			Message: &message,
		}, nil
	}
	return response, nil
}

// GetTemplate is the resolver for the getTemplate field.
func (r *queryResolver) GetTemplate(ctx context.Context, id string) (*model.TemplateResponse, error) {
	return r.Service.GetTemplate(ctx, id)
}

// GetRecentTemplates is the resolver for the getRecentTemplates field.
func (r *queryResolver) GetRecentTemplates(ctx context.Context, limit *int) (*model.TemplatesResponse, error) {
	return r.Service.GetRecentTemplates(ctx, limit)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type (
	mutationResolver struct{ *Resolver }
	queryResolver    struct{ *Resolver }
)
