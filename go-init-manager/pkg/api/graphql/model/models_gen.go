// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AdvancedConfig struct {
	EnableAuthentication *bool `json:"enableAuthentication,omitempty"`
	GenerateSwaggerDocs  *bool `json:"generateSwaggerDocs,omitempty"`
}

type AdvancedInput struct {
	EnableAuthentication *bool `json:"enableAuthentication,omitempty"`
	GenerateSwaggerDocs  *bool `json:"generateSwaggerDocs,omitempty"`
}

type CreateTemplateInput struct {
	Name      string           `json:"name"`
	Endpoints []*EndpointInput `json:"endpoints,omitempty"`
	Database  *DatabaseInput   `json:"database,omitempty"`
	Docker    *DockerInput     `json:"docker,omitempty"`
	Advanced  *AdvancedInput   `json:"advanced,omitempty"`
}

type DatabaseConfig struct {
	Type DatabaseType `json:"type"`
	Ddl  *string      `json:"ddl,omitempty"`
}

type DatabaseInput struct {
	Type DatabaseType `json:"type"`
	Ddl  *string      `json:"ddl,omitempty"`
}

type DockerConfig struct {
	Registry  *string `json:"registry,omitempty"`
	ImageName string  `json:"imageName"`
}

type DockerInput struct {
	Registry  *string `json:"registry,omitempty"`
	ImageName string  `json:"imageName"`
}

type EndpointConfig struct {
	Protocol ServiceProtocol `json:"protocol"`
	Role     ServiceRole     `json:"role"`
}

type EndpointInput struct {
	Protocol ServiceProtocol `json:"protocol"`
	Role     ServiceRole     `json:"role"`
}

type Mutation struct {
}

type Query struct {
}

type ServiceTemplate struct {
	ID        string            `json:"id"`
	Name      string            `json:"name"`
	Endpoints []*EndpointConfig `json:"endpoints,omitempty"`
	Database  *DatabaseConfig   `json:"database,omitempty"`
	Docker    *DockerConfig     `json:"docker,omitempty"`
	Advanced  *AdvancedConfig   `json:"advanced,omitempty"`
	CreatedAt string            `json:"createdAt"`
	UpdatedAt *string           `json:"updatedAt,omitempty"`
	ZipURL    *string           `json:"zipUrl,omitempty"`
	Version   *string           `json:"version,omitempty"`
	Status    *TemplateStatus   `json:"status,omitempty"`
	Error     *string           `json:"error,omitempty"`
}

type TemplateResponse struct {
	Success  bool             `json:"success"`
	Message  *string          `json:"message,omitempty"`
	Template *ServiceTemplate `json:"template,omitempty"`
}

type TemplatesResponse struct {
	Success   bool               `json:"success"`
	Message   *string            `json:"message,omitempty"`
	Templates []*ServiceTemplate `json:"templates,omitempty"`
}

type DatabaseType string

const (
	DatabaseTypePostgresql DatabaseType = "POSTGRESQL"
	DatabaseTypeMysql      DatabaseType = "MYSQL"
	DatabaseTypeNone       DatabaseType = "NONE"
)

var AllDatabaseType = []DatabaseType{
	DatabaseTypePostgresql,
	DatabaseTypeMysql,
	DatabaseTypeNone,
}

func (e DatabaseType) IsValid() bool {
	switch e {
	case DatabaseTypePostgresql, DatabaseTypeMysql, DatabaseTypeNone:
		return true
	}
	return false
}

func (e DatabaseType) String() string {
	return string(e)
}

func (e *DatabaseType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DatabaseType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DatabaseType", str)
	}
	return nil
}

func (e DatabaseType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServiceProtocol string

const (
	ServiceProtocolGrpc    ServiceProtocol = "GRPC"
	ServiceProtocolRest    ServiceProtocol = "REST"
	ServiceProtocolGraphql ServiceProtocol = "GRAPHQL"
)

var AllServiceProtocol = []ServiceProtocol{
	ServiceProtocolGrpc,
	ServiceProtocolRest,
	ServiceProtocolGraphql,
}

func (e ServiceProtocol) IsValid() bool {
	switch e {
	case ServiceProtocolGrpc, ServiceProtocolRest, ServiceProtocolGraphql:
		return true
	}
	return false
}

func (e ServiceProtocol) String() string {
	return string(e)
}

func (e *ServiceProtocol) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceProtocol(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceProtocol", str)
	}
	return nil
}

func (e ServiceProtocol) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServiceRole string

const (
	ServiceRoleClient ServiceRole = "CLIENT"
	ServiceRoleServer ServiceRole = "SERVER"
)

var AllServiceRole = []ServiceRole{
	ServiceRoleClient,
	ServiceRoleServer,
}

func (e ServiceRole) IsValid() bool {
	switch e {
	case ServiceRoleClient, ServiceRoleServer:
		return true
	}
	return false
}

func (e ServiceRole) String() string {
	return string(e)
}

func (e *ServiceRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceRole", str)
	}
	return nil
}

func (e ServiceRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TemplateStatus string

const (
	TemplateStatusPending    TemplateStatus = "PENDING"
	TemplateStatusProcessing TemplateStatus = "PROCESSING"
	TemplateStatusCompleted  TemplateStatus = "COMPLETED"
	TemplateStatusFailed     TemplateStatus = "FAILED"
)

var AllTemplateStatus = []TemplateStatus{
	TemplateStatusPending,
	TemplateStatusProcessing,
	TemplateStatusCompleted,
	TemplateStatusFailed,
}

func (e TemplateStatus) IsValid() bool {
	switch e {
	case TemplateStatusPending, TemplateStatusProcessing, TemplateStatusCompleted, TemplateStatusFailed:
		return true
	}
	return false
}

func (e TemplateStatus) String() string {
	return string(e)
}

func (e *TemplateStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TemplateStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TemplateStatus", str)
	}
	return nil
}

func (e TemplateStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
