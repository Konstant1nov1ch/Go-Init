/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±—ç–∫–µ–Ω–¥–æ–º –±–µ–∑ Apollo Client
 */

import config from '../config';
import { formatRelative } from 'date-fns';
import { ru } from 'date-fns/locale';

/**
 * –ü—Ä–æ—Å—Ç–æ–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –±—ç–∫–µ–Ω–¥–∞
 */
function getHostBackendUrl(): string {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –≤ Docker
  const inDocker = typeof window !== 'undefined' 
    ? window.location.hostname !== 'localhost'
    : false;
  
  // –í—ã–±–∏—Ä–∞–µ–º —Ö–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥—ã
  const host = inDocker ? 'host.docker.internal' : 'localhost';
  
  // –ü–æ—Ä—Ç –±—ç–∫–µ–Ω–¥–∞
  const port = config.backendPort || 60013;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
  return `http://${host}:${port}`;
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ä–µ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
function logEnvironmentInfo(): void {
  if (typeof window !== 'undefined') {
    console.log('Environment Info:');
    console.log(`- Current hostname: ${window.location.hostname}`);
    console.log(`- Backend host: ${window.location.hostname !== 'localhost' ? 'host.docker.internal' : 'localhost'}`);
    console.log(`- Backend URL: ${getHostBackendUrl()}`);
    console.log(`- Running in Docker: ${window.location.hostname !== 'localhost'}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—ç–∫–µ–Ω–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π fetch-–∑–∞–ø—Ä–æ—Å
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export async function testCorsConnection(): Promise<{
  success: boolean;
  message: string;
  details?: any;
}> {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–µ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    logEnvironmentInfo();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const url = config.apiUrl;
    console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å: ${url}`);
    console.log(`–ü—Ä—è–º–æ–π URL –±—ç–∫–µ–Ω–¥–∞: ${getHostBackendUrl()}`);

    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({
        query: `{ __typename }`,
      }),
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if (response.ok) {
      const data = await response.json();
      return {
        success: true,
        message: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±—ç–∫–µ–Ω–¥–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
        details: data,
      };
    } else {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${response.status} ${response.statusText}`,
        details: {
          status: response.status,
          statusText: response.statusText,
          headers: Object.fromEntries([...response.headers.entries()]),
        },
      };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ CORS-–æ—à–∏–±–∫–æ–π
    const isCorsError = error instanceof Error && 
      (error.message.includes('CORS') || 
       error.message.includes('Cross-Origin') ||
       error.message.includes('blocked'));
    
    return {
      success: false,
      message: isCorsError 
        ? `–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CORS-–æ—à–∏–±–∫–∞! ${config.inDocker ? '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Docker –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ host.docker.internal' : '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Vite –ø—Ä–æ–∫—Å–∏ (/graphql –≤–º–µ—Å—Ç–æ http://localhost:60013/graphql)'}`
        : `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error instanceof Error ? error.message : String(error)}`,
      details: error,
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
 */
export async function debugCorsConnection(): Promise<void> {
  const now = new Date();
  const timestamp = formatRelative(now, new Date(), { locale: ru });
  
  console.group(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API (${timestamp})`);
  console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
  console.log('- API URL:', config.apiUrl);
  console.log('- –ë—ç–∫–µ–Ω–¥ URL:', getHostBackendUrl());
  console.log('- –í Docker:', config.inDocker);
  console.log('- –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', import.meta.env.DEV ? '–î–∞' : '–ù–µ—Ç');
  
  try {
    const result = await testCorsConnection();
    if (result.success) {
      console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω:', result.message);
    } else {
      console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', result.message);
      
      if (config.inDocker) {
        console.log('–°–æ–≤–µ—Ç—ã –¥–ª—è Docker:');
        console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ host.docker.internal –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.');
        console.log('2. –í docker-compose.yml –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ extra_hosts: ["host.docker.internal:host-gateway"]');
        console.log('3. –î–ª—è Mac –∏ Windows —ç—Ç–æ –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –¥–ª—è Linux –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
      } else {
        console.log('–°–æ–≤–µ—Ç: –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Vite –ø—Ä–æ–∫—Å–∏, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∞–µ—Ç CORS-–ø—Ä–æ–±–ª–µ–º—ã');
      }
    }
    console.log('–î–µ—Ç–∞–ª–∏:', result.details);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    console.groupEnd();
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥
if (import.meta.env.DEV && (import.meta.env.VITE_ENABLE_CORS_DEBUG === 'true')) {
  window.addEventListener('load', () => {
    setTimeout(() => {
      debugCorsConnection();
    }, 1000);
  });
} 